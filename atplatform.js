module.exports=function(o){"use strict";o.nodes.registerType("atplatform",function(a){function e(){return require("./lib/atcommon").getBIOSVersion()}function r(){return require("./lib/atcommon").getECVersion()}function n(){var o=require("os").platform();return"win32"==o?require("./lib/atcommon").getWinOSVersion():"linux"==o?"Linux":o}function t(){return require("./lib/atcommon").getCPUModelName()}function i(){return require("./lib/atcommon").getComports()}function l(){return require("./lib/atcommon").getMemoryAvailable()}function d(){return require("./lib/atcommon").getDiskInfo()}function u(){return require("./lib/atcommon").getBoardName()}o.nodes.createNode(this,a);var p=this;({}).payload={},setTimeout(()=>{var o={};o.payload={},o.payload.ModuleID=u(),o.payload.BIOSVer=e(),o.payload.ECVer=r(),o.payload.OSVer=n(),o.payload.CPUName=t(),o.payload.MemAvail=l(),o.payload.diskInfo=d(),p.send(o)},1e3),this.on("input",o=>{o.payload.ModuleID&&(o.payload.ModuleID=u()),o.payload.BIOSVer&&(o.payload.BIOSVer=e()),o.payload.ECVer&&(o.payload.ECVer=r()),o.payload.OSVer&&(o.payload.OSVer=n()),o.payload.CPUName&&(o.payload.CPUName=t()),o.payload.Comports&&(o.payload.Comports=i()),o.payload.MemAvail&&(o.payload.MemAvail=l()),o.payload.diskInfo&&(o.payload.diskInfo=d()),p.send(o)})})};
